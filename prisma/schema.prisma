// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId     String      @unique
  userName   String      @unique
  email      String      @unique
  password   String
  avatar     String      @default("https://www.faydavipegitim.com/media/contents/0ed09-user-profile.jpeg")
  createdAt  DateTime?   @default(now())
  updatedAt  DateTime?   @updatedAt
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  followers  Follower[]
  followings Following[]

}

model Topic {
  topicId   String    @unique
  text      String    @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  posts     Post[]
}

model Post {
  postId      String    @unique
  text        String
  user        User      @relation(fields: [postUserId], references: [userId], onDelete: Cascade)
  postUserId  String
  topic       Topic     @relation(fields: [postTopicId], references: [topicId], onDelete: Cascade)
  postTopicId String
  image       String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  comments    Comment[]
  likes       Like[]
}

model Comment {
  commentId     String    @unique
  post          Post      @relation(fields: [commentPostId], references: [postId], onDelete: Cascade)
  text          String
  commentPostId String
  user          User      @relation(fields: [commentUserId], references: [userId], onDelete: Cascade)
  commentUserId String
  likes         Like[]
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

}

model Like {
  likeId        String    @unique
  post          Post?     @relation(fields: [likePostId], references: [postId], onDelete: Cascade)
  likePostId    String?
  comment       Comment?  @relation(fields: [likeCommentId], references: [commentId], onDelete: Cascade)
  likeCommentId String?
  user          User      @relation(fields: [likeUserId], references: [userId], onDelete: Cascade)
  likeUserId    String
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}

model Follower {
  folId      String    @unique
  followerId String
  follower   User      @relation(fields: [followedId], references: [userId], onDelete: Cascade)
  followedId String
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model Following {
  followingId String    @unique
  followerId  String
  following   User      @relation(fields: [followerId], references: [userId], onDelete: Cascade)
  followedId  String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}
